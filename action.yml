name: "Setup CODESYS Installation"
author: powerIO GmbH (Kevin Rohn)
description: "Setup CODESYS Installation for headless CI/CD Jobs"

branding:
  icon: 'package'
  color: 'red'

inputs:
  installer-version:
    description: 'The version of the installer to use to install the CODESYS installation.'
    required: false
    default: 2.2.2

  generation:
    description: > 
      'This is the base generation you want to install. For example `3.5.19.0`.
      Even if you want to install the version `3.5.19.6` you have to define the generation as `3.5.19.0`.  
      The patch version is defined by the `patch` input.'  
    required: false
    default: 3.5.19.0

  architecture:
    description: 'The installation architecture of CODESYS. Allowed inputs: `32` and `64`.'
    required: false
    default: 64
    
  patch:
    description: 'The patch of the CODESYS version to install.'
    required: false
    default: 0

  hotfix:
    description: 'The hotfix of the CODESYS version to install.'
    required: false
    default: 0

  build:
    description: 'The build of the CODESYS version to install.'
    required: false
    default: 0

  installation-directory:
    description: > 
      'This can be used to define a custom installation directory.  
      If this input is empty, the installation path is set based on the architecture and installation version.  

      For example - bit `64`, generation `3.5.19.0` and patch `6`:  
      `C:\Program Files\CODESYS 3.5.19.6`

      For example - bit `32`, generation `3.5.17.0` and patch `2`:  
      `C:\Program Files (x86)\CODESYS 3.5.17.2`'
    required: false
    default: ''
  
  auto-update-installer:
    description: 'If set to `true`, the installer will be updated before the installation.'
    required: false
    default: true

outputs:
  codesys-path: 
    value: ${{ steps.parameter_validation.outputs.installation-path }}
    description: 'The path of the installed CODESYS version.'
  codesys-executable:
    value: ${{ steps.parameter_validation.outputs.installation-path }}\CODESYS\Common\CODESYS.exe
    description: 'The path of the CODESYS executable.'
  installer-path:
    value: ${{ steps.globals.outputs.INSTALLER_DIR }}
    description: 'The path of the installed CODESYS installer.'
  installer-cli-executable:
    value: ${{ steps.globals.outputs.INSTALLER_DIR }}\APInstaller.CLI.exe
    description: 'The path of the CODESYS installer CLI executable.'

runs:
  using: composite
  steps:
    - name: Check runner OS
      if: runner.os != 'Windows'
      shell: pwsh
      run: |
        echo "::error::This action is only supported on Windows runners."
        exit 1
        
    - name: Set globals
      id: globals
      shell: pwsh
      run: |
        echo "::group::Set Global variables for installation"
        echo "BASE_URL_INSTALLER=https://store-archive.codesys.com/ftp_download/3S/Installer/000127" >> $env:GITHUB_OUTPUT
        echo "INSTALLER_VERSION=${{ inputs.installer-version }}" >> $env:GITHUB_OUTPUT
        echo "INSTALLER_DIR=C:\Program Files (x86)\CODESYS\APInstaller" >> $env:GITHUB_OUTPUT
        echo "::endgroup::"

    - name: Download installer
      shell: bash
      run: |
        echo "::group::Download CODESYS installer"
        base_url=${{ steps.globals.outputs.BASE_URL_INSTALLER }}
        version=${{ steps.globals.outputs.INSTALLER_VERSION }}
        curl "${base_url}/${version}/CODESYS%20Installer%20${version}.exe" -o installer.exe
        echo "::endgroup::"

    - name: Install CODESYS installer
      shell: pwsh
      run: |
        echo "::group::Install CODESYS installer"
        Start-Process -FilePath "installer.exe" -ArgumentList "/S /v/qb" -Wait
        Remove-Item -Path "installer.exe"
        echo "::endgroup::"

    - if: ${{ inputs.auto-update-installer == 'true' }}
      name: Update Installer
      shell: pwsh
      run: |
        echo "::group::Update CODESYS installer"
        cd "${{ steps.globals.outputs.INSTALLER_DIR }}"
        .\APInstaller.CLI.exe --selfUpdate
        if ($LASTEXITCODE -eq 1) {
          exit 0
        } elseif ($LASTEXITCODE -eq -1) {
          exit 0
        }
        if ($LASTEXITCODE -ne 0) {
          throw "Update failed with exit code $LASTEXITCODE."
        }
        echo "::endgroup::"

    - name: Prepare and validate inputs
      id: parameter_validation
      shell: bash
      run: |
        echo "::group::Validate inputs"
        if ! [[ ${{ inputs.generation }} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Generation format is invalid. Must be X.X.X.X where X is a number."
          exit 1
        fi
        if [ "${{ inputs.architecture }}" != "64" ] && [ "${{ inputs.architecture }}" != "32" ]; then
          echo "Architecture must be 64 or 32."
          exit 1
        fi
        if ! [[ ${{ inputs.patch }} =~ ^[0-9]+$ ]] \
              || ! [[ ${{ inputs.hotfix }} =~ ^[0-9]+$ ]] \
              || ! [[ ${{ inputs.build }} =~ ^[0-9]+$ ]]; then
          echo "Patch, Hotfix, and Build must be numeric."
          exit 1
        fi

        IFS='.' read -ra version_parts <<< "${{ inputs.generation }}"
        length=${#version_parts[@]}
        let "last_index=length-1"
        version_parts[$last_index]=${{ inputs.patch }}
        new_generation="${version_parts[0]}"
        for (( i=1; i<${#version_parts[@]}; i++ )); do
            new_generation="$new_generation.${version_parts[$i]}"
        done
        installation_name="CODESYS $(echo "${new_generation}" | sed 's/ /./g')"

        if [[ -z "${{ inputs.installation-directory }}" ]]; then
          if [ "${{ inputs.architecture }}" == "64" ]; then
            installation_path="C:\Program Files\CODESYS ${installation_name}"
          else
            installation_path="C:\Program Files (x86)\CODESYS ${installation_name}"
          fi
        else
          installation_path="${{ inputs.installation-directory }}"
        fi

        echo "installation-path=$installation_path" >> $GITHUB_OUTPUT
        echo "installation-name=$installation_name" >> $GITHUB_OUTPUT
        echo "::endgroup::"

    - name: Install CODESYS
      shell: pwsh
      run: |
        echo "::group::Install CODESYS"
        cd "${{ steps.globals.outputs.INSTALLER_DIR }}"
        echo "This process will take a few minutes. Please be patient."
        .\APInstaller.CLI.exe --createInstallation `
        --product CODESYS `
        --generation "${{ inputs.generation }}" `
        --bit ${{ inputs.architecture }} `
        --patch ${{ inputs.patch }} `
        --hotfix ${{ inputs.hotfix }} `
        --build ${{ inputs.build }} `
        --installationName "${{ steps.parameter_validation.outputs.installation-name }}" `
        --destinationFolder "${{ steps.parameter_validation.outputs.installation-path }}"
        echo ""
        echo "::endgroup::"